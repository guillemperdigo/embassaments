# -*- coding: utf-8 -*-
"""embassaments-whatsapp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18eJtp4_DDLwB1m8o_vOQB3nG-joaEtSc
"""

import requests
import pandas as pd
from tqdm import tqdm
from dotenv import load_dotenv
import os

load_dotenv()  # carrega variables des de .env

account_sid = os.getenv("TWILIO_ACCOUNT_SID")
auth_token = os.getenv("TWILIO_AUTH_TOKEN")
to_number = os.getenv("TWILIO_TO")
from_number = os.getenv("TWILIO_FROM")

if not all([account_sid, auth_token, from_number, to_number]):
    raise ValueError("Falten variables d'entorn al fitxer .env")


# --- 1. Obtenir el catÃ leg de sensors ---
catalog_url = "http://aca-web.gencat.cat/sdim2/apirest/catalog?componentType=embassament"
response = requests.get(catalog_url)
catalog = response.json()

# --- 2. Extreure sensors de volum i percentatge ---
sensors = []
for provider in catalog.get("providers", []):
    sensors.extend(provider.get("sensors", []))

sensors_data = []
for sensor in sensors:
    desc = sensor.get("description", "").lower()
    if "volum embassat" in desc:
        capacitat_raw = sensor.get("componentAdditionalInfo", {}).get("Capacitat mÃ xima embassament", "0")
        capacitat_maxima = float(capacitat_raw.replace(",", ".").replace(" hmÂ³", ""))

        sensors_data.append({
            "embassament": sensor.get("componentDesc"),
            "sensor": sensor.get("sensor"),
            "provider": provider.get("provider"),
            "unit": sensor.get("unit"),
            "tipus": desc,
            "capacitat_maxima": capacitat_maxima
        })

# --- 3. Obtenir valors actuals de cada sensor ---
records = []
for s in tqdm(sensors_data):
    url = f"http://aca-web.gencat.cat/sdim2/apirest/data/{s['provider']}/{s['sensor']}"
    r = requests.get(url)
    if r.status_code == 200:
        obs = r.json().get("observations", [])
        if obs:
            records.append({
                "Embassament": s["embassament"],
                "Unitat": s["unit"],
                "Tipus": s["tipus"],
                "Valor": float(obs[0]["value"].strip()),
                "Timestamp": obs[0]["timestamp"]
            })

# --- 4. Crear DataFrame i separar volum i % ---
df = pd.DataFrame(records)
exclosos = ['GaiÃ  (el Catllar)', 'Pasteral (la Cellera de Ter)']
df = df[~df['Embassament'].isin(exclosos)]
df_vol = df[df['Unitat'] == 'hmÂ³']
df_pct = df[df['Unitat'] == '%']

# --- 5. Afegir capacitat mÃ xima al df_vol ---
capacitats = {
    s["embassament"]: s["capacitat_maxima"]
    for s in sensors_data if s["unit"] == "hmÂ³"
}

df_vol = df_vol.copy()
df_vol["Capacitat mÃ xima (hmÂ³)"] = df_vol["Embassament"].map(capacitats)

# --- 6. CÃ lcul totals ---
volum_total = df_vol["Valor"].sum()
capacitat_total = df_vol["Capacitat mÃ xima (hmÂ³)"].sum()
percentatge_total = (volum_total / capacitat_total) * 100

# --- 7. Merge volum + % ---
df_final = pd.merge(
    df_vol[['Embassament', 'Valor']],
    df_pct[['Embassament', 'Valor']],
    on='Embassament',
    suffixes=(' (hmÂ³)', ' (%)')
)

df_final = df_final.sort_values('Valor (%)')
print(df_final.to_string(index=False))

# --- 8. Resultat final ---
print(f"\nðŸ’§ Volum total embassat: {volum_total:.2f} hmÂ³")
print(f"ðŸ“¦ Capacitat total combinada: {capacitat_total:.2f} hmÂ³")
print(f"ðŸ“Š % total embassat: {percentatge_total:.1f}%")


from twilio.rest import Client

# Twilio config
client = Client(account_sid, auth_token)

# NÃºmero de destÃ­ (el teu) i de Twilio sandbox
to_numbers = os.getenv("TWILIO_TO", "").split(",")  # crea una llista
from_number = os.getenv("TWILIO_FROM")

# Missatge
missatge = (
    f"ðŸ’§ Volum total embassat: {volum_total:.2f} hmÂ³\n"
    f"ðŸ“¦ Capacitat total: {capacitat_total:.2f} hmÂ³\n"
    f"ðŸ“Š Percentatge total embassat: {percentatge_total:.1f}%"
)

# Enviament
for to_number in to_numbers:
    client.messages.create(
        body=missatge,
        from_=from_number,
        to=to_number.strip()
    )
